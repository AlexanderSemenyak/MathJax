(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{VerbConfiguration:()=>g,VerbMethods:()=>c});const n=("undefined"!=typeof window?window:global).MathJax._.components.global,r=(n.GLOBAL,n.isObject,n.combineConfig,n.combineDefaults,n.combineWithMathJax),a=(n.MathJax,MathJax._.input.tex.Configuration),o=a.Configuration,i=(a.ConfigurationHandler,a.ParserConfiguration,MathJax._.input.tex.TexConstants.TexConstant),s=MathJax._.input.tex.SymbolMap,l=(s.parseResult,s.AbstractSymbolMap,s.RegExpMap,s.AbstractParseMap,s.CharacterMap,s.DelimiterMap,s.MacroMap,s.CommandMap),b=(s.EnvironmentMap,MathJax._.input.tex.TexError.default);let c={Verb:function(e,t){const n=e.GetNext(),r=++e.i;if(""===n)throw new b("MissingArgFor","Missing argument for %1",t);for(;e.i<e.string.length&&e.string.charAt(e.i)!==n;)e.i++;if(e.i===e.string.length)throw new b("NoClosingDelim","Can't find closing delimiter for %1",e.currentCS);const a=e.string.slice(r,e.i).replace(/ /g,"\xa0");e.i++,e.Push(e.create("token","mtext",{mathvariant:i.Variant.MONOSPACE},a))}};new l("verb",{verb:"Verb"},c);const g=o.create("verb",{handler:{macro:["verb"]}});MathJax.loader&&MathJax.loader.checkVersion("[tex]/verb","4.0.0-beta.3","tex-extension"),r({_:{input:{tex:{verb:{VerbConfiguration:t}}}}})})();