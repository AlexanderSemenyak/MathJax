(()=>{"use strict";var e={d:(t,r)=>{for(var a in r)e.o(r,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:r[a]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{BraketItem:()=>g});var r={};e.r(r),e.d(r,{default:()=>A});var a={};e.r(a),e.d(a,{BraketConfiguration:()=>C});const o=("undefined"!=typeof window?window:global).MathJax._.components.global,s=(o.GLOBAL,o.isObject,o.combineConfig,o.combineDefaults,o.combineWithMathJax),n=(o.MathJax,MathJax._.input.tex.Configuration),i=n.Configuration,c=(n.ConfigurationHandler,n.ParserConfiguration,MathJax._.input.tex.StackItem),l=(c.MmlStack,c.BaseItem),h=MathJax._.core.MmlTree.MmlNode,d=h.TEXCLASS,m=(h.TEXCLASSNAMES,h.MATHVARIANTS,h.indentAttributes,h.AbstractMmlNode,h.AbstractMmlTokenNode,h.AbstractMmlLayoutNode,h.AbstractMmlBaseNode,h.AbstractMmlEmptyNode,h.TextNode,h.XMLNode,MathJax._.input.tex.ParseUtil.default),p=MathJax._.util.lengths,u=(p.BIGDIMEN,p.UNITS,p.RELUNITS,p.MATHSPACE),M=(p.length2em,p.percent,p.em),b=(p.emRounded,p.px,M(u.thinmathspace));class g extends l{constructor(){super(...arguments),this.barNodes=[]}get kind(){return"braket"}get isOpen(){return!0}checkItem(e){return e.isKind("close")?e.getProperty("braketbar")?(this.barNodes.push(...super.toMml(!0,!0).childNodes),this.Clear(),l.fail):[[this.factory.create("mml",this.toMml())],!0]:e.isKind("mml")?(this.Push(e.toMml()),this.getProperty("single")?[[this.toMml()],!0]:l.fail):super.checkItem(e)}toMml(e=!0,t){let r=super.toMml(e,t);if(!e)return r;let a=this.getProperty("open"),o=this.getProperty("close");if(this.barNodes.length&&(r=this.create("node","inferredMrow",[...this.barNodes,r])),this.getProperty("stretchy"))return this.getProperty("space")&&(r=this.create("node","inferredMrow",[this.create("token","mspace",{width:b}),r,this.create("token","mspace",{width:b})])),m.fenced(this.factory.configuration,a,r,o);let s={fence:!0,stretchy:!1,symmetric:!0,texClass:d.OPEN},n=this.create("token","mo",s,a);s.texClass=d.CLOSE;let i=this.create("token","mo",s,o);return this.create("node","mrow",[n,r,i],{open:a,close:o})}}const k=MathJax._.input.tex.SymbolMap,f=(k.parseResult,k.AbstractSymbolMap,k.RegExpMap,k.AbstractParseMap,k.CharacterMap,k.DelimiterMap,k.MacroMap),y=k.CommandMap,x=(k.EnvironmentMap,MathJax._.input.tex.base.BaseMethods),P=(x.splitAlignArray,x.default),B=MathJax._.input.tex.TexError.default;let N={};N.Macro=P.Macro,N.Braket=function(e,t,r,a,o,s,n=!1){let i=e.GetNext();if(""===i)throw new B("MissingArgFor","Missing argument for %1",e.currentCS);let c=!0;"{"===i&&(e.i++,c=!1),e.Push(e.itemFactory.create("braket").setProperties({barcount:0,barmax:s,open:r,close:a,stretchy:o,single:c,space:n}))},N.Bar=function(e,t){let r="|"===t?"|":"\u2016",a=e.stack.Top();if(a.isKind("over")&&(a=e.stack.Top(2)),!a.isKind("braket")||a.getProperty("barcount")>=a.getProperty("barmax"))return!1;if("|"===r&&"|"===e.GetNext()&&(e.i++,r="\u2016"),!a.getProperty("stretchy")){let t=e.create("token","mo",{stretchy:!1,"data-braketbar":!0,texClass:d.ORD},r);return void e.Push(t)}let o=e.itemFactory.create("close").setProperty("braketbar",!0);e.Push(o),a.barNodes.push(e.create("node","TeXAtom",[],{texClass:d.CLOSE}),e.create("token","mo",{stretchy:!0,"data-braketbar":!0,texClass:d.BIN},r),e.create("node","TeXAtom",[],{texClass:d.OPEN})),a.setProperty("barcount",a.getProperty("barcount")+1)};const A=N;new y("Braket-macros",{bra:["Macro","{\\langle {#1} \\vert}",1],ket:["Macro","{\\vert {#1} \\rangle}",1],braket:["Braket","\u27e8","\u27e9",!1,1/0],set:["Braket","{","}",!1,1],Bra:["Macro","{\\left\\langle {#1} \\right\\vert}",1],Ket:["Macro","{\\left\\vert {#1} \\right\\rangle}",1],Braket:["Braket","\u27e8","\u27e9",!0,1/0],Set:["Braket","{","}",!0,1,!0],ketbra:["Macro","{\\vert {#1} \\rangle\\langle {#2} \\vert}",2],Ketbra:["Macro","{\\left\\vert {#1} \\right\\rangle\\left\\langle {#2} \\right\\vert}",2],"|":"Bar"},A),new f("Braket-characters",{"|":"Bar"},A);const C=i.create("braket",{handler:{character:["Braket-characters"],macro:["Braket-macros"]},items:{[g.prototype.kind]:g}});MathJax.loader&&MathJax.loader.checkVersion("[tex]/braket","4.0.0-beta.3","tex-extension"),s({_:{input:{tex:{braket:{BraketConfiguration:a,BraketItems:t,BraketMethods:r}}}}})})();