(()=>{"use strict";var t={d:(e,a)=>{for(var n in a)t.o(a,n)&&!t.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:a[n]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{UnicodeConfiguration:()=>x,UnicodeMethods:()=>p});const a=("undefined"!=typeof window?window:global).MathJax._.components.global,n=(a.GLOBAL,a.isObject,a.combineConfig,a.combineDefaults,a.combineWithMathJax),o=(a.MathJax,MathJax._.input.tex.Configuration),i=o.Configuration,r=(o.ConfigurationHandler,o.ParserConfiguration,MathJax._.input.tex.TexError.default),c=MathJax._.input.tex.SymbolMap,s=(c.parseResult,c.AbstractSymbolMap,c.RegExpMap,c.AbstractParseMap,c.CharacterMap,c.DelimiterMap,c.MacroMap,c.CommandMap),l=(c.EnvironmentMap,MathJax._.input.tex.ParseUtil.default),u=MathJax._.input.tex.NodeUtil.default,d=MathJax._.util.Entities,m=(d.options,d.entities,d.add,d.remove,d.translate,d.numeric),h=MathJax._.input.tex.base.BaseConfiguration,f=h.Other;h.BaseTags,h.BaseConfiguration;let p={},g={};p.Unicode=function(t,e){let a=t.GetBrackets(e),n=null,o=null;a&&(a.replace(/ /g,"").match(/^(\d+(\.\d*)?|\.\d+),(\d+(\.\d*)?|\.\d+)$/)?(n=a.replace(/ /g,"").split(/,/),o=t.GetBrackets(e)):o=a);let i=l.trimSpaces(t.GetArgument(e)).replace(/^0x/,"x");if(!i.match(/^(x[0-9A-Fa-f]+|[0-9]+)$/))throw new r("BadUnicode","Argument to %1 must be a number",t.currentCS);let c=parseInt(i.match(/^x/)?"0"+i:i);g[c]?o||(o=g[c][2]):g[c]=[800,200,o,c],n&&(g[c][0]=Math.floor(1e3*parseFloat(n[0])),g[c][1]=Math.floor(1e3*parseFloat(n[1])));let s=t.stack.env.font,d={};o?(g[c][2]=d.fontfamily=o.replace(/'/g,"'"),s&&(s.match(/bold/)&&(d.fontweight="bold"),s.match(/italic|-mathit/)&&(d.fontstyle="italic"))):s&&(d.mathvariant=s);let h=t.create("token","mtext",d,m(i));u.setProperty(h,"unicode",!0),t.Push(h)},p.RawUnicode=function(t,e){const a=t.GetArgument(e).trim();if(!a.match(/^[0-9A-F]{1,6}$/))throw new r("BadRawUnicode","Argument to %1 must a hexadecimal number with 1 to 6 digits",t.currentCS);const n=parseInt(a,16);t.string=String.fromCodePoint(n)+t.string.substr(t.i),t.i=0},p.Char=function(t,e){let a,n=t.GetNext(),o="";const i=t.string.substr(t.i);if("'"===n){if(a=i.match(/^'(?:([0-7]{1,7}) ?|(\\\S)|(.))/u),a)if(a[1])o=String.fromCodePoint(parseInt(a[1],8));else if(a[3])o=a[3];else{t.i+=2;const e=[...t.GetCS()];if(e.length>1)throw new r("InvalidAlphanumeric","Invalid alphanumeric constant for %1",t.currentCS);o=e[0],a=[""]}}else'"'===n?(a=i.match(/^"([0-9A-F]{1,6}) ?/),a&&(o=String.fromCodePoint(parseInt(a[1],16)))):(a=i.match(/^([0-9]{1,7}) ?/),a&&(o=String.fromCodePoint(parseInt(a[1]))));if(!o)throw new r("MissingNumber","Missing numeric constant for %1",t.currentCS);t.i+=a[0].length,o>="0"&&o<="9"?t.Push(t.create("token","mn",{},o)):o.match(/[A-Za-z]/)?t.Push(t.create("token","mi",{},o)):f(t,o)},new s("unicode",{unicode:"Unicode",U:"RawUnicode",char:"Char"},p);const x=i.create("unicode",{handler:{macro:["unicode"]}});MathJax.loader&&MathJax.loader.checkVersion("[tex]/unicode","4.0.0-beta.3","tex-extension"),n({_:{input:{tex:{unicode:{UnicodeConfiguration:e}}}}})})();